Liinguagem assíncrona

O JavaScript foi idealizado como uma linguagem de programação síncrona.

Começa no início de um arquivo e executa linha por linha de código até chegar ao final Com isso apenas uma coisa pode acontecer a cada momento.

Chamamos esse tipo de código síncrono de bloqueador. Ele, efetivamente, bloqueia a execução de outros códigos.

O Javascript não quer fazer todo o trabalho sozinho, então pede o auxílio em outro lugar.

Vamos dar uma olhada em um exemplo de código assíncrono.
const logName = () => {
   console.log("Han")
}

setTimeout(logName, 0)

console.log("Olá!")
Ao rodar o resultado desse código, teremos o seguinte resultado no console:
// no console
Olá!
Han

O JavaScript sempre é executado em um ambiente.
Em geral, esse ambiente é o navegador. Mas ele também pode ser um servidor, com o NodeJS. Tá bem, mas qual é a diferença?
A diferença – e esta é a parte importante – é que o navegador e o servidor (o NodeJS), em termos de funcionalidade, não são equivalentes. Eles são, em geral, parecidos, mas não são a mesma coisa.

Assim, se você já se perguntou o motivo de poder usar fetch em JavaScript quando está no navegador (mas precisar instalar um pacote ao rodá-lo no NodeJS), essa é a questão. Alguém imaginou que fetch era uma boa ideia e fez dele uma ferramenta para o ambiente do NodeJS.

const getData = async () => {
    const response = await fetch("https://jsonplaceholder.typicode.com/todos/1")
    const data = await response.json()
    
    console.log(data)
}

getData()
